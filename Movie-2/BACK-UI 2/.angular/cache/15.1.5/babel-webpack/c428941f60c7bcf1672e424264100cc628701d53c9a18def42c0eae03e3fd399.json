{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, switchMap, throwError } from 'rxjs';\nimport { TokenApiModel } from '../models/token-api.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ng-angular-popup\";\nimport * as i3 from \"@angular/router\";\nexport class TokenInterceptor {\n  constructor(auth, toast, router) {\n    this.auth = auth;\n    this.toast = toast;\n    this.router = router;\n  }\n  intercept(request, next) {\n    const myToken = this.auth.getToken();\n    if (myToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${myToken}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 401) {\n          //this.toast.warning({detail:\"Warning\",summary:\"Token is Expired! please login again\"});\n          //this.router.navigate(['login']);\n          //handle\n          this.handleUnAuthorizedError(request, next);\n        }\n      }\n      return throwError(() => err);\n    }));\n  }\n  handleUnAuthorizedError(req, next) {\n    let tokenApiModel = new TokenApiModel();\n    tokenApiModel.accessToken = this.auth.getToken();\n    tokenApiModel.refreshToken = this.auth.getRefreshToken();\n    return this.auth.renewToken(tokenApiModel).pipe(switchMap(data => {\n      this.auth.storeRefreshToken(data.refreshToken);\n      this.auth.storeToken(data.accessToken);\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${data.accessToken}`\n        } //bearer + myToken\n      });\n\n      return next.handle(req);\n    }), catchError(err => {\n      return throwError(() => {\n        this.toast.warning({\n          detail: \"Warning\",\n          summary: \"Token is expired, Please Login again\"\n        });\n        this.router.navigate(['login']);\n      });\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.NgToastService), i0.ɵɵinject(i3.Router));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAASC,UAAU,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;AAIpE,SAASC,aAAa,QAAQ,2BAA2B;;;;;AAGzD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB,EAAUC,KAAoB,EAAUC,MAAa;IAArE,SAAI,GAAJF,IAAI;IAAsB,UAAK,GAALC,KAAK;IAAyB,WAAM,GAANC,MAAM;EAAU;EAE5FC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,OAAO,GAAG,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE;IAEpC,IAAGD,OAAO,EAAC;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUJ,OAAO;QAAE;OAChD,CAAC;;IAIJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9BlB,UAAU,CAAEmB,GAAO,IAAG;MACpB,IAAGA,GAAG,YAAYpB,iBAAiB,EAAC;QAClC,IAAGoB,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACrB;UACA;UAEA;UAEA,IAAI,CAACC,uBAAuB,CAACX,OAAO,EAACC,IAAI,CAAC;;;MAI9C,OAAOT,UAAU,CAAC,MAAKiB,GAAG,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAEAE,uBAAuB,CAACC,GAAqB,EAACX,IAAiB;IAC7D,IAAIY,aAAa,GAAG,IAAIpB,aAAa,EAAE;IACvCoB,aAAa,CAACC,WAAW,GAAG,IAAI,CAAClB,IAAI,CAACO,QAAQ,EAAG;IACjDU,aAAa,CAACE,YAAY,GAAG,IAAI,CAACnB,IAAI,CAACoB,eAAe,EAAG;IACzD,OAAO,IAAI,CAACpB,IAAI,CAACqB,UAAU,CAACJ,aAAa,CAAC,CACzCL,IAAI,CACHjB,SAAS,CAAE2B,IAAkB,IAAG;MAC9B,IAAI,CAACtB,IAAI,CAACuB,iBAAiB,CAACD,IAAI,CAACH,YAAY,CAAC;MAC9C,IAAI,CAACnB,IAAI,CAACwB,UAAU,CAACF,IAAI,CAACJ,WAAW,CAAC;MAGtCF,GAAG,GAAGA,GAAG,CAACR,KAAK,CAAC;QACdC,UAAU,EAAC;UAACC,aAAa,EAAC,UAAUY,IAAI,CAACJ,WAAW;QAAE,CAAC,CAAC;OACzD,CAAC;;MACF,OAAOb,IAAI,CAACM,MAAM,CAACK,GAAG,CAAC;IACzB,CAAC,CAAC,EACFtB,UAAU,CAAEmB,GAAG,IAAG;MAChB,OAAOjB,UAAU,CAAC,MAAI;QACpB,IAAI,CAACK,KAAK,CAACwB,OAAO,CAAC;UAACC,MAAM,EAAC,SAAS;UAACC,OAAO,EAAC;QAAsC,CAAC,CAAC;QACrF,IAAI,CAACzB,MAAM,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACH;;AAvDW9B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA+B,SAAhB/B,gBAAgB;AAAA","names":["HttpErrorResponse","catchError","switchMap","throwError","TokenApiModel","TokenInterceptor","constructor","auth","toast","router","intercept","request","next","myToken","getToken","clone","setHeaders","Authorization","handle","pipe","err","status","handleUnAuthorizedError","req","tokenApiModel","accessToken","refreshToken","getRefreshToken","renewToken","data","storeRefreshToken","storeToken","warning","detail","summary","navigate","factory"],"sourceRoot":"","sources":["F:\\RUSHI PRACTICE ANGULAR\\JWT_AUTH_2\\BACK_UI\\src\\app\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { NgToastService } from 'ng-angular-popup';\nimport { Router } from '@angular/router';\nimport { TokenApiModel } from '../models/token-api.model';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private auth:AuthService, private toast:NgToastService, private router:Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const myToken = this.auth.getToken();\n\n    if(myToken){\n      request = request.clone({\n        setHeaders: {Authorization: `Bearer ${myToken}`}\n      })     \n\n    }\n    \n    return next.handle(request).pipe(\n      catchError((err:any)=>{\n        if(err instanceof HttpErrorResponse){\n          if(err.status === 401 ){\n            //this.toast.warning({detail:\"Warning\",summary:\"Token is Expired! please login again\"});\n            //this.router.navigate(['login']);\n\n            //handle\n\n            this.handleUnAuthorizedError(request,next)\n\n          }\n        }\n        return throwError(()=> err)\n      })\n    );   \n  }\n\n  handleUnAuthorizedError(req: HttpRequest<any>,next: HttpHandler){    \n    let tokenApiModel = new TokenApiModel() ;\n    tokenApiModel.accessToken = this.auth.getToken()!;\n    tokenApiModel.refreshToken = this.auth.getRefreshToken()!;\n    return this.auth.renewToken(tokenApiModel)\n    .pipe(\n      switchMap((data:TokenApiModel)=>{\n        this.auth.storeRefreshToken(data.refreshToken);\n        this.auth.storeToken(data.accessToken);\n        \n\n        req = req.clone({\n          setHeaders:{Authorization:`Bearer ${data.accessToken}`} //bearer + myToken\n        })\n        return next.handle(req) ;\n      }),\n      catchError((err)=>{\n        return throwError(()=>{\n          this.toast.warning({detail:\"Warning\",summary:\"Token is expired, Please Login again\"});\n          this.router.navigate(['login']);\n        })\n      })\n    )\n  }\n\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}