{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"https://localhost:7034/api/User/\";\n    this.userPayload = this.decodeToken();\n  }\n  signup(userObj) {\n    return this.http.post(`${this.baseUrl}register`, userObj);\n  }\n  createMovie(MovieObj) {\n    return this.http.post(\"https://localhost:7034/api/Movie/addmovie\", MovieObj);\n  }\n  login(loginObj) {\n    return this.http.post(`${this.baseUrl}authenticate`, loginObj);\n  }\n  storeToken(tokenValue) {\n    localStorage.setItem('token', tokenValue);\n  }\n  storeRefreshToken(tokenValue) {\n    localStorage.setItem('refreshToken', tokenValue);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  signOut() {\n    localStorage.clear();\n    this.router.navigate(['login']);\n  }\n  decodeToken() {\n    const jwtHelper = new JwtHelperService();\n    const token = this.getToken();\n    console.log(jwtHelper.decodeToken(token));\n    return jwtHelper.decodeToken(token);\n  }\n  getRolefromToken() {\n    if (this.userPayload) {\n      return this.userPayload.role;\n    }\n  }\n  getFullNamefromToken() {\n    if (this.userPayload) {\n      return this.userPayload.unique_name;\n    }\n  }\n  renewToken(tokenApi) {\n    return this.http.post(`${this.baseUrl}refresh`, tokenApi);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,gBAAgB,QAAQ,oBAAoB;;;;AAMrD,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAiB,EAASC,MAAgB;IAA1C,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAL5C,YAAO,GAAU,kCAAkC;IAMzD,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtC;EAEDC,MAAM,CAAEC,OAAW;IACjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,UAAU,EAACF,OAAO,CAAC;EAC/D;EAEAG,WAAW,CAAEC,QAAY;IACvB,OAAO,IAAI,CAACT,IAAI,CAACM,IAAI,CAAM,2CAA2C,EAACG,QAAQ,CAAC;EAClF;EAEOC,KAAK,CAACC,QAAY;IACvB,OAAO,IAAI,CAACX,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,cAAc,EAACI,QAAQ,CAAC;EAEpE;EAEAC,UAAU,CAACC,UAAiB;IAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACF,UAAU,CAAC;EAC1C;EAEAG,iBAAiB,CAACH,UAAiB;IACjCC,YAAY,CAACC,OAAO,CAAC,cAAc,EAACF,UAAU,CAAC;EACjD;EAEAI,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,eAAe;IACb,OAAOL,YAAY,CAACI,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAE,UAAU;IACR,OAAO,CAAC,CAACN,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAG,OAAO;IACLP,YAAY,CAACQ,KAAK,EAAE;IACpB,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAEApB,WAAW;IACT,MAAMqB,SAAS,GAAG,IAAI3B,gBAAgB,EAAE;IACxC,MAAM4B,KAAK,GAAG,IAAI,CAACR,QAAQ,EAAG;IAC9BS,OAAO,CAACC,GAAG,CAACH,SAAS,CAACrB,WAAW,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAOD,SAAS,CAACrB,WAAW,CAACsB,KAAK,CAAC;EACrC;EAEAG,gBAAgB;IACd,IAAG,IAAI,CAAC1B,WAAW,EAAC;MAClB,OAAO,IAAI,CAACA,WAAW,CAAC2B,IAAI;;EAEhC;EAEAC,oBAAoB;IAClB,IAAG,IAAI,CAAC5B,WAAW,EAAC;MAClB,OAAO,IAAI,CAACA,WAAW,CAAC6B,WAAW;;EAEvC;EAEAC,UAAU,CAACC,QAAwB;IACjC,OAAO,IAAI,CAACjC,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,SAAS,EAAC0B,QAAQ,CAAC;EAC/D;;AAtEWnC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["JwtHelperService","AuthService","constructor","http","router","userPayload","decodeToken","signup","userObj","post","baseUrl","createMovie","MovieObj","login","loginObj","storeToken","tokenValue","localStorage","setItem","storeRefreshToken","getToken","getItem","getRefreshToken","isLoggedIn","signOut","clear","navigate","jwtHelper","token","console","log","getRolefromToken","role","getFullNamefromToken","unique_name","renewToken","tokenApi","factory","providedIn"],"sourceRoot":"","sources":["F:\\RUSHI PRACTICE ANGULAR\\JWT_AUTH_2\\BACK_UI\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\"\nimport { Router } from '@angular/router';\nimport {} from '@auth0/angular-jwt';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { TokenApiModel } from '../models/token-api.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private baseUrl:string = \"https://localhost:7034/api/User/\"\n  private userPayload:any;\n  \n\n\n  constructor(private http : HttpClient,private router :  Router) {\n    this.userPayload = this.decodeToken();\n   }\n\n  signup (userObj:any){  \n    return this.http.post<any>(`${this.baseUrl}register`,userObj)\n  }\n\n  createMovie (MovieObj:any){  \n    return this.http.post<any>(\"https://localhost:7034/api/Movie/addmovie\",MovieObj)\n  }\n\n  public login(loginObj:any){\n    return this.http.post<any>(`${this.baseUrl}authenticate`,loginObj)\n\n  }\n\n  storeToken(tokenValue:string){\n    localStorage.setItem('token',tokenValue) \n  }\n\n  storeRefreshToken(tokenValue:string){\n    localStorage.setItem('refreshToken',tokenValue) \n  }\n\n  getToken(){\n    return localStorage.getItem('token')\n  }\n\n  getRefreshToken(){\n    return localStorage.getItem('refreshToken')\n  }\n\n  isLoggedIn(): boolean{\n    return !!localStorage.getItem('token')\n  }\n\n  signOut(){\n    localStorage.clear();\n    this.router.navigate(['login']);\n  }\n\n  decodeToken(){\n    const jwtHelper = new JwtHelperService();\n    const token = this.getToken()!;\n    console.log(jwtHelper.decodeToken(token));\n    return jwtHelper.decodeToken(token);\n  }\n\n  getRolefromToken(){\n    if(this.userPayload){\n      return this.userPayload.role;\n    }\n  }\n\n  getFullNamefromToken(){\n    if(this.userPayload){\n      return this.userPayload.unique_name;\n    }\n  }\n\n  renewToken(tokenApi : TokenApiModel){\n    return this.http.post<any>(`${this.baseUrl}refresh`,tokenApi)\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}